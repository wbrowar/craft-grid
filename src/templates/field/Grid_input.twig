{# @var craft \craft\web\twig\variables\CraftVariable #}
{#
/**
 * Grid plugin for Craft CMS 3.x
 *
 * Grid Field Input
 *
 * @author    Will Browar
 * @copyright Copyright (c) 2018 Will Browar
 * @link      http://wbrowar.com
 * @package   Grid
 * @since     1.0.0
 */
#}

{#{% import "_includes/forms" as forms %}#}
{% import "grid/macros/helpers.twig" as helpers %}

{% set iconPath = view.getAssetManager().getPublishedPath('@wbrowar/grid/assetbundles/grid/dist/icon', true) %}

<div class="grid__input" v-cloak>
    <div class="grid__input__header">
        <div class="grid__input__select" v-cloak>
            <div class="grid__input__select__item" :class="[{ 'grid__input__select__item--selected': currentLayoutShown === breakpoint.minWidth }, 'grid__input__select__item--' + breakpoint.icon, 'grid__input__select__item--' + breakpoint.minWidth, 'icon_' + breakpoint.icon]" @click="currentLayoutShown = breakpoint.minWidth" v-for="breakpoint in field.layout.breakpoints" v-if="breakpoint.showInInput !== 'hidden'" v-cloak>
                <span>${ breakpoint.minWidth }</span>
            </div>
        </div>
    </div>
    <div class="grid__input__instructions" v-cloak>
        <div class="grid__input__instructions--highlighted" v-if="currentAction === 'settingTargetItemStart'">{{ 'Click on a grid cell to begin layout.'|t('grid') }}</div>
        <div class="grid__input__instructions--highlighted" v-else-if="currentAction === 'settingTargetItemEnd'">{{ 'Click on a grid cell to end layout.'|t('grid') }}</div>
        <div v-else>{{ 'Select a title below to begin.'|t('grid') }}</div>
    </div>
    <div class="grid__input__breakpoints" v-cloak>
        <div class="grid__input__breakpoint" :class="{ 'grid__input__breakpoint--before': currentLayoutShown > breakpoint.minWidth, 'grid__input__breakpoint--after': currentLayoutShown < breakpoint.minWidth }" v-for="breakpoint in field.layout.breakpoints" v-if="breakpoint.showInInput !== 'hidden'" v-cloak>
            <div class="grid__input__target_items">
                <div style="height: 100%">
                    <div class="grid__input__target_items__list">
                        <div><b v-text="target.name"></b></div>
                        <div class="grid__input__target_item" v-for="(item, index) in target.items" v-if="item.status === 'enabled'" v-cloak>
                            <div class="grid__input__target_item__complete"><span class="grid__input__target_item__complete--completed" v-if="targetItemDataIsSet(breakpoint, item, true)" title="{{ 'Item has been laid out'|t('grid') }}"><b>âœ“</b></span><span class="grid__input__target_item__complete--incomplete" v-else><span v-if="breakpoint.notLaidOut === 'visible'" title="{{ 'Item will be added to the grid'|t('grid') }}">{{ svg(iconPath ~ '/visible.svg') }}</span><span title="{{ 'Item will be hidden for this layout'|t('grid') }}" v-else>{{ svg(iconPath ~ '/hidden.svg') }}</span></span></div>
                            <div class="grid__input__target_item__remove" :class="targetItemDataIsSet(breakpoint, item) ? 'grid__input__target_item__remove--x' : 'grid__input__target_item__remove--add'" title="{{ 'Add to layout'|t('grid') }}"><span class="delete icon" title="{{ 'Remove item from grid'|t('grid') }}" @click="removeTargetItemData(breakpoint, item)" title="{{ 'Remove from layout'|t('grid') }}" v-if="targetItemDataIsSet(breakpoint, item)"></span><span @click="setTargetItemData(breakpoint, item)" class="add icon light" v-else></span></div>
                            <div class="grid__input__target_item__label" :class="{ 'grid__input__target_item__label--selected': targetItemBeingSet.id === item.id }" @click="setTargetItemData(breakpoint, item)" @mouseenter="onPreviewItemMouseOver(breakpoint, item)" @mouseleave="onPreviewItemMouseOut(breakpoint, item)" title="{{ 'Add to layout'|t('grid') }}"><span>${ item.title }</span></div>
                        </div>
                        <div class="grid__input__add_remove_index" v-if="target.id === '__none__'">
                            <div class="btn icon add small" @click="indexTargetItemsTotal++">Item</div>
                            <div class="btn icon delete small" @click="indexTargetItemsTotal--">Item</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="grid__input__target_preview grid__preview" :class="{ 'grid__preview--auto_columns': breakpoint.modeColumns === 'auto', 'grid__preview--auto_rows': breakpoint.modeRows === 'auto' }">
                <div class="grid__preview__grid grid__preview__grid--layout" :style="stylePreviewGrid(breakpoint)">
                    <div class="grid__preview__item" v-for="item in breakpoint.preview.items"></div>
                </div>
                <div class="grid__preview__grid grid__preview__grid--items" :style="stylePreviewGrid(breakpoint)">
                    <div v-for="(item, key, index) in fieldValue[breakpoint.id]" :class="{ 'grid__preview__grid--items--rollover': key === ('id' + targetItemBeingMousedOver) }" :style="stylePreviewGridItem(item)" v-cloak><span>${ previewItemTitle(key) || item.title }</span></div>
                </div>
                <div class="grid__preview__grid grid__preview__grid--controls" :class="{ 'grid__preview__grid--controls--rollover': ['settingTargetItemStart', 'settingTargetItemEnd'].indexOf(currentAction) > -1 }" :style="stylePreviewGrid(breakpoint)">
                    <div class="grid__preview__item" v-for="(item, key) in breakpoint.preview.items" @click="onPreviewItemClicked(breakpoint.id, item)"></div>
                </div>
                <div class="grid__preview__add grid__preview__add--column" @click="addAutoColumn(breakpoint)" v-if="breakpoint.modeColumns === 'auto'"><span>+&nbsp;column</span></div>
                <div class="grid__preview__add grid__preview__add--row" @click="addAutoRow(breakpoint)" v-if="breakpoint.modeRows === 'auto'"><span>+&nbsp;row</span></div>
            </div>
        </div>
    </div>
    <input type="hidden" name="{{ name }}" v-model="fieldDataJson">
</div>
